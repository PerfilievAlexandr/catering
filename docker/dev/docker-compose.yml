version: '3.7'

services:
  postgres:
    build:
      context: services/postgres/
      dockerfile: Dockerfile
    container_name: postgres.db
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - db:/var/lib/postgresql/data
      - ./services/postgres:/docker-entrypoint-initdb.d
    networks:
      - internal

  app:
    container_name: shop.backend
    build:
      context: ../../app/
    ports:
      - 8000:8000
      - 8080:8080
    volumes:
      - ../../app:/usr/src/app
    command: ./mvnw spring-boot:run -Dspring-boot.run.jvmArguments="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000"
    networks:
      - internal
    depends_on:
      - postgres
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:${HOST}:${DB_PORT}/${DB_NAME}
      - SPRING_DATASOURCE_USERNAME={DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SERVER_PORT=8080

  web:
    container_name: shop.frontend
    command: yarn start
    build:
      context: ../../web/
    depends_on:
      - app
    volumes:
      - ../../web/src:/usr/src/app/src
    ports:
      - "3000:3000"

volumes:
  db:

networks:
  internal:
    driver: bridge